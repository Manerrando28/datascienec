import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="üìä An√°lise de Dados", layout="wide")
st.title("üìä An√°lise de Dados")

# Fun√ß√£o para carregar dados
@st.cache_data
def carregar_dados(caminho):
    try:
        return pd.read_csv(caminho)
    except FileNotFoundError:
        st.error("Arquivo 'dados.csv' n√£o encontrado na pasta 'data/'.")
        return None

# Carregamento
df = carregar_dados("data/dados.csv")
if df is None:
    st.stop()
else:
    st.success("‚úÖ Dados carregados com sucesso!")

# üîç Visualiza√ß√£o Inicial
st.subheader("üîç Visualiza√ß√£o Inicial")
st.markdown("""
**Sobre o conjunto de dados:**  
Este dataset cont√©m informa√ß√µes sobre colaboradores da empresa, como sal√°rio, idade, tempo de experi√™ncia, escolaridade e setor.
""")
st.dataframe(df.head())
st.write("### Colunas dispon√≠veis no dataset:")
st.write(df.columns.tolist())

# üìå Tipos de Vari√°veis
st.subheader("üìå Tipos de Vari√°veis")
st.dataframe(pd.DataFrame(df.dtypes, columns=["Tipo"]))

st.markdown("""
**Principais perguntas de an√°lise:**  
- Qual √© a m√©dia salarial dos colaboradores?  
- Existe correla√ß√£o entre idade e sal√°rio?  
- A m√©dia salarial est√° alinhada com o valor de mercado?
""")

# üìà Estat√≠sticas Descritivas
st.subheader("üìà Estat√≠sticas Descritivas")
st.write(df.describe())

# Sele√ß√£o de vari√°vel num√©rica
num_cols = df.select_dtypes(include=["float64", "int64"]).columns
coluna = st.selectbox("Selecione uma vari√°vel num√©rica para an√°lise:", num_cols)

# Estat√≠sticas adicionais
st.write(f"**Mediana de {coluna}:** {df[coluna].median():.2f}")
st.write(f"**Moda de {coluna}:** {df[coluna].mode()[0]:.2f}")
st.write(f"**Vari√¢ncia de {coluna}:** {df[coluna].var():.2f}")

# üîó Correla√ß√£o
st.subheader("üîó Correla√ß√£o")
if len(num_cols) >= 2:
    fig_corr, ax_corr = plt.subplots(figsize=(10, 6))
    sns.heatmap(df[num_cols].corr(), annot=True, cmap="coolwarm", ax=ax_corr)
    st.pyplot(fig_corr)
else:
    st.info("N√£o h√° colunas num√©ricas suficientes para gerar o mapa de correla√ß√£o.")

# üß™ Intervalo de Confian√ßa e Teste de Hip√≥tese
st.subheader("üß™ Intervalo de Confian√ßa e Teste de Hip√≥tese")
media_teorica = st.number_input("Informe a m√©dia te√≥rica para compara√ß√£o:", value=5000.0)

media_amostral = df[coluna].mean()
desvio_padrao = df[coluna].std()
n = df[coluna].count()
ic_95 = stats.norm.interval(0.95, loc=media_amostral, scale=desvio_padrao / np.sqrt(n))

st.markdown(f"""
**Intervalo de Confian√ßa (95%) para a m√©dia de {coluna}:**  
De R$ {ic_95[0]:,.2f} at√© R$ {ic_95[1]:,.2f}
""")

# Teste de hip√≥tese
t_stat, p_valor = stats.ttest_1samp(df[coluna].dropna(), media_teorica)
st.write(f"**T-estat√≠stica:** {t_stat:.2f}")
st.write(f"**P-valor:** {p_valor:.4f}")

if p_valor < 0.05:
    st.success("‚úÖ Rejeitamos H‚ÇÄ: a m√©dia √© significativamente diferente da m√©dia te√≥rica.")
else:
    st.info("‚ÑπÔ∏è N√£o rejeitamos H‚ÇÄ: a m√©dia pode ser igual √† m√©dia te√≥rica.")

# Interpreta√ß√£o
st.markdown(f"""
**Interpreta√ß√£o:**  
A m√©dia amostral de **{coluna}** foi de R$ {media_amostral:,.2f}.  
O intervalo de confian√ßa indica que, com 95% de certeza, a m√©dia populacional est√° entre R$ {ic_95[0]:,.2f} e R$ {ic_95[1]:,.2f}.  
Como o p-valor foi {'menor' if p_valor < 0.05 else 'maior'} que 0.05, {'rejeitamos' if p_valor < 0.05 else 'n√£o rejeitamos'} a hip√≥tese nula de que a m√©dia √© igual √† m√©dia te√≥rica.
""")

# üìä Visualiza√ß√£o da Distribui√ß√£o
st.subheader("üìä Distribui√ß√£o da vari√°vel selecionada")
fig_dist, ax_dist = plt.subplots()
sns.histplot(df[coluna], kde=True, ax=ax_dist)
ax_dist.axvline(media_teorica, color='blue', linestyle='--', label='M√©dia Te√≥rica')
ax_dist.axvline(ic_95[0], color='red', linestyle='--', label='Limite Inferior (IC)')
ax_dist.axvline(ic_95[1], color='green', linestyle='--', label='Limite Superior (IC)')
ax_dist.axvline(media_amostral, color='black', linestyle='-', label='M√©dia Amostral')
ax_dist.legend()
st.pyplot(fig_dist)
